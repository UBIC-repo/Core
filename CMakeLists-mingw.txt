cmake_minimum_required(VERSION 3.6)
project(ubic)

#SET(GCC_COVERAGE_COMPILE_FLAGS "-fstack-protector")
SET( CMAKE_C_FLAGS   "-fstack-protector -fstack-protector-all" )
SET( CMAKE_CXX_FLAGS "-fstack-protector -fstack-protector-all" )

SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)

#SET(CMAKE_C_COMPILER i686-w64-mingw32-gcc-posix )
#SET(CMAKE_CXX_COMPILER i686-w64-mingw32-g++-posix )
#SET(CMAKE_RC_COMPILER i686-w64-mingw32-windres)
SET(CMAKE_C_COMPILER x86_64-w64-mingw32-gcc-posix )
SET(CMAKE_CXX_COMPILER x86_64-w64-mingw32-g++-posix )
SET(CMAKE_RC_COMPILER x86_64-w64-mingw32-windres)
SET(CMAKE_SYSTEM_NAME Windows)
SET(CMAKE_FIND_ROOT_PATH "/usr/x86_64-w64-mingw32" "/home/jan/mingw-libs64")
#SET(CMAKE_FIND_ROOT_PATH "/usr/i686-w64-mingw32" "/home/jan/mingw-libs")

include_directories(/home/jan/mingw-libs64/include)
link_directories(/home/jan/mingw-libs64/lib)

message(WARNING "CMAKE_FIND_ROOT_PATH: ${CMAKE_FIND_ROOT_PATH}")

if(APPLE)
    include_directories(/usr/local/include/)
    include_directories(/usr/local/include/leveldb/)
    set(OPENSSL_ROOT_DIR "/usr/local/opt/openssl@1.1/")

    link_directories(/usr/local/opt/pcsc-lite/lib/)
    include_directories(/usr/local/opt/pcsc-lite/include/PCSC/)
    link_libraries(pcsclite)
elseif(UNIX)
    #include_directories(/usr/include/PCSC)
    #link_libraries(pcsclite)
endif()
include_directories(/usr/include/leveldb)

find_package(OpenSSL REQUIRED)
if( OPENSSL_FOUND )
    #include_directories(${OPENSSL_INCLUDE_DIRS})
    message(WARNING "Using OpenSSL ${OPENSSL_VERSION} include: ${OPENSSL_INCLUDE_DIRS}")
endif()

link_libraries(ssl)
link_libraries(crypto)
link_libraries(ws2_32)
link_libraries(winscard)
link_libraries(wsock32)

add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})
find_package(Boost REQUIRED)
if(NOT Boost_FOUND)
    message(FATAL_ERROR "Could not find boost!")
endif()
include_directories(${Boost_INCLUDE_DIRS})

link_libraries(boost_serialization)
link_libraries(boost_system)
link_libraries(boost_filesystem)
link_libraries(leveldb)
link_libraries(pthread)


link_libraries(shlwapi)
link_libraries(iphlpapi)

set(SOURCE_FILES

        Crypto/CreateSignature.cpp
        Crypto/CreateSignature.h
        Crypto/Sha256.cpp
        Crypto/Sha256.h
        Crypto/VerifySignature.cpp
        Crypto/VerifySignature.h

        Tools/Hexdump.cpp
        Tools/Hexdump.h
        Tools/Log.h

        NtpEsk/NtpEsk.cpp
        NtpEsk/NtpEsk.h
        NtpEsk/NtpEskSignatureRequestObject.h
        NtpEsk/NtpEskSignatureVerificationObject.h

        NtpRsk/NtpRsk.cpp
        NtpRsk/NtpRsk.h
        NtpRsk/NtpRskSignatureRequestObject.h
        NtpRsk/NtpRskSignatureVerificationObject.h

        Crypto/Ripemd160.cpp
        Crypto/Ripemd160.h
        Crypto/Hash160.cpp
        Crypto/Hash160.h
        Crypto/Hash256.cpp
        Crypto/Hash256.h

        CertStore/Cert.cpp
        CertStore/Cert.h
        CertStore/CertStore.cpp
        CertStore/CertStore.h
        Crypto/PassportCrypto.cpp
        Crypto/PassportCrypto.h

        Countries/Currency.h

        support/allocators/zeroafterfree.h
        support/cleanse.h
        support/clease.cpp

        PathSum/PathSum.cpp
        PathSum/PathSum.h

        PassportReader/LDS/LDSParser.cpp
        PassportReader/LDS/LDSParser.h
        PassportReader/PKCS7/PKCS7Parser.cpp
        PassportReader/PKCS7/PKCS7Parser.h
        PassportReader/Reader/BacKeys.cpp
        PassportReader/Reader/BacKeys.h
        PassportReader/Reader/Reader.cpp
        PassportReader/Reader/Reader.h
        PassportReader/Reader/SessionKeys.cpp
        PassportReader/Reader/SessionKeys.h
        PassportReader/Reader/NFC.cpp
        PassportReader/Reader/NFC.h

        Transaction/Transaction.cpp
        Transaction/Transaction.h Block.cpp
        Transaction/TxIn.cpp
        Transaction/TxIn.h
        Transaction/TxOut.cpp
        Transaction/TxOut.h

        Base58.h
        Base58.cpp
        serialize.h
        prevector.h
        streams.h
        AddressStore.cpp
        AddressStore.h
        main.cpp
        Block.h
        Chain.cpp
        Chain.h
        BlockHeader.cpp
        BlockHeader.h
        Address.cpp
        Address.h
        UAmount.h
        UScript.h
        ChainParams.h
        MerkleTree.cpp
        MerkleTree.h
        Wallet.cpp
        Wallet.h

        Crypto/ECCtools.cpp
        Crypto/ECCtools.h
        FS/FS.cpp
        FS/FS.h
        Test/Test.cpp
        Test/Test.h
        BlockStore.cpp
        BlockStore.h
        BlockCreator/Mint.cpp
        BlockCreator/Mint.h
        UBICalculator.cpp
        UBICalculator.h
        Loader.cpp
        Loader.h
        TxPool.cpp
        TxPool.h

        Network/Network.cpp
        Network/Network.h
        Network/NetworkCommands.h
        Network/Peers.h
        Network/NetworkMessage.h
        Network/NetworkMessageHandler.cpp
        Network/NetworkMessageHandler.h
        Network/BanList.h
        Network/BlockCache.h

        DSCAttachedPassportCounter.cpp
        DSCAttachedPassportCounter.h
        DB/DB.cpp
        DB/DB.h

        AddressHelper.h
        JSON/Api.cpp
        JSON/Api.h
        REST/ApiServer.cpp
        REST/ApiServer.h
        Network/Server.h

        Network/Peers.cpp
        Consensus/Vote.h
        Consensus/VoteStore.h
        Consensus/Delegate.cpp
        Consensus/Delegate.h
        App.h
        Transaction/TransactionHelper.cpp
        Transaction/TransactionHelper.h
        Time.h
        WebInterface/WebInterface.cpp
        WebInterface/WebInterface.h
        Config.cpp
        Config.h
        Tools/Log.cpp

        endian.h
        )
add_executable(ubic ${SOURCE_FILES})


SET_TARGET_PROPERTIES( ubic PROPERTIES LINK_FLAGS ${CMAKE_CURRENT_SOURCE_DIR}/ubic.res )
